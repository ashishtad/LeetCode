///////////////////////////////////////////////////////////////////////////////////////////////////
//387. First Unique Character in a String
// Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.
//
// solved on: 5/5/2020
//////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int firstUniqChar(string s) {
        
        int len = s.size();
        if( len ==0)
            return -1;
        if(len==1)
            return 0;
       
        //stores char as key and in pair <count,index>
        unordered_map<char, pair<int,int>> m;
        
        for( int i=0; i<len; ++i)
        {
            m[s[i]].first++;
            m[s[i]].second =i;
        }
        unordered_map<char, pair<int,int>>::iterator it;
        for(it=m.begin(); it!=m.end(); ++it)
        {
            if( it->second.first==1 ) len = min(len,it->second.second);
        }
        
    
        return len==s.size() ? -1:len;
    }
};